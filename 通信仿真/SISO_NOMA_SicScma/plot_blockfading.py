#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Sun Dec 22 13:42:19 2024

@author: jack
"""



import os
import sys


import matplotlib
# matplotlib.use('TkAgg')
# matplotlib.use('Agg')
import matplotlib.pyplot as plt
# from mpl_toolkits.axes_grid1.inset_locator import mark_inset
# from mpl_toolkits.axes_grid1.inset_locator import inset_axes
# from matplotlib.patches import ConnectionPatch
import numpy as np
# import torch
from matplotlib.font_manager import FontProperties
from matplotlib.pyplot import MultipleLocator
import socket, getpass
from scipy.signal import savgol_filter

# 获取当前系统主机名
host_name = socket.gethostname()
# 获取当前系统用户名
user_name = getpass.getuser()
# 获取当前系统用户目录
user_home = os.path.expanduser('~')
home = os.path.expanduser('~')

# 本项目自己编写的库
# from option import args
sys.path.append("..")
# checkpoint
# import Utility



fontpath = "/usr/share/fonts/truetype/windows/"
# fname =  "/usr/share/fonts/truetype/arphic/SimSun.ttf",
font = FontProperties(fname=fontpath+"simsun.ttf", size=22)
fontpath1 = "/usr/share/fonts/truetype/msttcorefonts/"
fonte = FontProperties(fname=fontpath1+"Times_New_Roman.ttf", size=22)
fontpath2 = "/usr/share/fonts/truetype/NerdFonts/"
font1 = FontProperties(fname=fontpath2+"Caskaydia Cove ExtraLight Nerd Font Complete.otf", size=20)

# mark  = ['s','v','*', 'o', 'd', '>', '1', 'p', '2', 'h', 'P', '3', '|', 'X', '4', '8', 'H', '+', 'x', 'D', '_', '$\\clubsuit$', '$\\bowtie$', '$\\boxdot$', '$\\boxtimes$', '$\\boxminus$',  '$\\boxplus$', '$\\bigodot$','$\\bigoplus$', '$\\bigotimes$', '$\\bigstar$', '$\\blacksquare$', '$\circledR$', '$\circledS$',  '$\\bigtriangledown$','$\\bigtriangleup$','$\\blacktriangleleft$', '$\\blacktriangleright$', '$\\diamondsuit',   '$\heartsuit$', '$666$', '$\\varrho$', '$\\Omega$', '$\\nabla$', '$\\Upsilon$', '$\\mho$', '$\\Phi$',  '$\\divideontimes$', '$\\otimes$', '$\\odot$', '$\\ominus$', '$\\oplus$', '$\\oslash$', '$\\otimes$']

color = ['#1E90FF','#FF6347','#00FF00','#0000FF','#4ea142','#FF00FF','#FFA500','#800080','#FF0000','#EE82EE','#00FFFF','#9932CC','#00CED1','#CD5C5C',  '#7B68EE','#808000']
lsty = [(0, (3, 10, 1, 10, 1, 10)), (0, (1, 1)), (0, (1, 2)), (0, (5, 1)), (0, (1, 10)), (0, (1, 2)),  (0, (5, 10)), (0, (5, 5)), (0, (3, 10, 1, 10)), (0, (3, 5, 1, 5)), (0, (3, 5, 1, 5, 1, 5)),  '-', ':', '--', '-.', ]
alabo = ['(a)', '(b)', '(c)', '(d)', '(e)', '(f)', '(g)', '(h)']


# 第一组数据，第一列是Eb/N0或SNR, 第二列是BER，第三列是WER，下同。
Joint_block_2u_w_powdiv_1 = np.array([[0.00, 0.86206897, 0.22624820, 0.35005837, 0.00000000, 24.388],
                                            [1.00, 0.80645161, 0.19827369, 0.31612273, 0.00000000, 23.995],
                                            [2.00, 0.69124424, 0.16077279, 0.25692144, 0.00000000, 22.495],
                                            [3.00, 0.63025210, 0.14302537, 0.24106322, 0.00000000, 22.160],
                                            [4.00, 0.52447552, 0.11994305, 0.19572908, 0.00000000, 18.932],
                                            [5.00, 0.45884146, 0.09813858, 0.16674805, 0.00000000, 17.924],
                                            [6.00, 0.38961039, 0.07788657, 0.13305093, 0.00000000, 15.766],
                                            [7.00, 0.31512605, 0.06192760, 0.10950220, 0.00000000, 13.676],
                                            [8.00, 0.25951557, 0.05108537, 0.08743107, 0.00000000, 11.448],
                                            [9.00, 0.22058824, 0.04302045, 0.07687557, 0.00000000, 10.449],
                                            [10.00, 0.16629712, 0.03430636, 0.06392912, 0.00000000, 8.504],
                                            [11.00, 0.15202020, 0.02892105, 0.05322364, 0.00000000, 7.628],
                                            [12.00, 0.11801731, 0.02151972, 0.03754887, 0.00000000, 6.013],
                                            [13.00, 0.09487666, 0.01747374, 0.02973667, 0.00000000, 4.976],
                                            [14.00, 0.07349339, 0.01381255, 0.02491120, 0.00000000, 4.160],
                                            [15.00, 0.06102522, 0.01103698, 0.01965680, 0.00000000, 3.503],
                                            [16.00, 0.04447080, 0.00866428, 0.01596664, 0.00000000, 2.769],
                                            [17.00, 0.0374887082, 0.006180485, 0.011109, 0.00000000, 2.35],
                                            [18.00, 0.02658161, 0.00508996, 0.00960001, 0.00000000, 1.905],
                                            [19.00, 0.02361372, 0.00433694, 0.00771842, 0.00000000, 1.676],
                                            [20.00, 0.01990842, 0.00357554, 0.00642124, 0.00000000, 1.485],
                                            [21.00, 0.01348982, 0.00243607, 0.00451276, 0.00000000, 1.210],
                                            [22.00, 0.01134309, 0.00214815, 0.00413772, 0.00000000, 1.227],
                                            [23.00, 0.00975039, 0.00178487, 0.00325400, 0.00000000, 1.005],
                                            [24.00, 0.00786906, 0.00143249, 0.00262568, 0.00000000, 0.897],
                                            [25.00, 0.00614326, 0.00105521, 0.00197040, 0.00000000, 0.819],
                                            [26.00, 0.00489524, 0.00089161, 0.00157250, 0.00000000, 0.753],
                                            [27.00, 0.00431611, 0.00077787, 0.00142491, 0.00000000, 0.721],
                                            [28.00, 0.00301114, 0.00057373, 0.00107766, 0.00000000, 0.660],
                                            [29.00, 0.00241167, 0.00044008, 0.00082619, 0.00000000, 0.627],
                                            [30.00, 0.00189022, 0.00035454, 0.00064884, 0.00000000, 0.598],
                                            [31.00, 0.00153414, 0.00028863, 0.00051888, 0.00000000, 0.578],
                                            [32.00, 0.00123979, 0.00021821, 0.00040814, 0.00000000, 0.565],

                                        ])

Joint_block_2u_w_powdiv_2 = np.array([[0.00, 0.85511364, 0.23069624, 0.35772150, 0.00000000, 24.642],
                                            [1.00, 0.79629630, 0.19964244, 0.32216229, 0.00000000, 24.365],
                                            [2.00, 0.69444444, 0.16539171, 0.27463108, 0.00000000, 22.863],
                                            [3.00, 0.65502183, 0.15141836, 0.25485296, 0.00000000, 22.557],
                                            [4.00, 0.54945055, 0.12627704, 0.20640167, 0.00000000, 19.764],
                                            [5.00, 0.46583851, 0.10193553, 0.17734618, 0.00000000, 18.748],
                                            [6.00, 0.42156863, 0.08416492, 0.14908854, 0.00000000, 17.511],
                                            [7.00, 0.34722222, 0.06839102, 0.12233254, 0.00000000, 14.935],
                                            [8.00, 0.27068345, 0.05365298, 0.09510595, 0.00000000, 12.291],
                                            [9.00, 0.27322404, 0.05246400, 0.08994336, 0.00000000, 11.774],
                                            [10.00, 0.18050542, 0.03581904, 0.06742629, 0.00000000, 9.157],
                                            [11.00, 0.16835017, 0.03334122, 0.05888091, 0.00000000, 8.369],
                                            [12.00, 0.12427746, 0.02333347, 0.04315745, 0.00000000, 6.614],
                                            [13.00, 0.10128292, 0.01809311, 0.03239471, 0.00000000, 5.335],
                                            [14.00, 0.07668712, 0.01495848, 0.02765429, 0.00000000, 4.312],
                                        ])

Joint_block_2u_w_powdiv_3 = np.array([[0.00, 0.84745763, 0.23662054, 0.37091720, 0.00000000, 24.689],
                                        [1.00, 0.79629630, 0.20599268, 0.33526579, 0.00000000, 24.571],
                                        [2.00, 0.68807339, 0.17545424, 0.29470685, 0.00000000, 23.757],
                                        [3.00, 0.66079295, 0.16030252, 0.27149298, 0.00000000, 22.965],
                                        [4.00, 0.59523810, 0.13881138, 0.23314267, 0.00000000, 21.020],
                                        [5.00, 0.50167224, 0.10929988, 0.18938780, 0.00000000, 19.938],
                                        [6.00, 0.44395280, 0.09254010, 0.16469626, 0.00000000, 18.326],
                                        [7.00, 0.38860104, 0.08034630, 0.14282100, 0.00000000, 16.848],
                                        [8.00, 0.31055901, 0.06439853, 0.11874838, 0.00000000, 14.124],
                                        [9.00, 0.27027027, 0.05477900, 0.09598466, 0.00000000, 12.285],
                                        [10.00, 0.20833333, 0.04214952, 0.07898220, 0.00000000, 10.406],
                                        [11.00, 0.18203883, 0.03586141, 0.06500303, 0.00000000, 8.995],
                                        [12.00, 0.15547521, 0.03030471, 0.05387235, 0.00000000, 7.675],
                                        [13.00, 0.11820331, 0.02087874, 0.03798513, 0.00000000, 6.152],
                                        [14.00, 0.09124088, 0.01703935, 0.03206618, 0.00000000, 5.051],

                                        ])

Joint_block_2u_w_powdiv_4 = np.array([[0.00, 0.84269663, 0.24100794, 0.37955363, 0.00000000, 24.890],
                                    [1.00, 0.78534031, 0.21324853, 0.35153182, 0.00000000, 24.657],
                                    [2.00, 0.70754717, 0.18404518, 0.31098909, 0.00000000, 24.302],
                                    [3.00, 0.66079295, 0.16714706, 0.28617153, 0.00000000, 23.333],
                                    [4.00, 0.60975610, 0.14818740, 0.25336636, 0.00000000, 21.896],
                                    [5.00, 0.54347826, 0.12017026, 0.20909760, 0.00000000, 20.964],
                                    [6.00, 0.47619048, 0.10212364, 0.18042535, 0.00000000, 19.614],
                                    [7.00, 0.43604651, 0.09252930, 0.16554438, 0.00000000, 18.446],
                                    [8.00, 0.34482759, 0.07173132, 0.13083244, 0.00000000, 15.371],
                                    [9.00, 0.28735632, 0.05630575, 0.10197782, 0.00000000, 13.140],
                                    [10.00, 0.23696682, 0.04891298, 0.08978204, 0.00000000, 11.576],
                                    [11.00, 0.19329897, 0.03900839, 0.07306349, 0.00000000, 9.675],
                                    [12.00, 0.17502917, 0.03495342, 0.06355063, 0.00000000, 8.875],
                                    [13.00, 0.13425513, 0.02441755, 0.04469712, 0.00000000, 6.930],
                                    [14.00, 0.10359116, 0.01928171, 0.03567690, 0.00000000, 5.573],

                                    ])


## 不等功率分配, 1 倍等间隔
sic_block_2u_w_powdiv_1 = np.array([[0.00, 0.81793478, 0.22756560, 0.35841967, 0.00000000, 42.326],
                                    [2.00, 0.69036697, 0.17281573, 0.28259389, 0.00000000, 36.544],
                                    [4.00, 0.56818182, 0.14171993, 0.23362038, 0.00000000, 30.536],
                                    [6.00, 0.37688442, 0.08607981, 0.13970733, 0.00000000, 21.471],
                                    [8.00, 0.27027027, 0.05955800, 0.10125985, 0.00000000, 15.972],
                                    [10.00, 0.18181818, 0.03951113, 0.06469460, 0.00000000, 11.165],
                                    [12.00, 0.11269722, 0.02414919, 0.04072948, 0.00000000, 7.406],
                                    [14.00, 0.09697165, 0.01971876, 0.03243043, 0.00000000, 6.378],
                                    [16.00, 0.05592716, 0.01203629, 0.01950222, 0.00000000, 4.205],
                                    [18.00, 0.04398013, 0.00865294, 0.01288652, 0.00000000, 3.457],
                                    [20.00, 0.02646436, 0.00512299, 0.00793552, 0.00000000, 2.478],
                                    [22.00, 0.01580778, 0.00314859, 0.00485760, 0.00000000, 1.902],
                                    [24.00, 0.01282161, 0.00270031, 0.00394885, 0.00000000, 1.706],
                                    [26.00, 0.00713029, 0.00161402, 0.00249040, 0.00000000, 1.388],
                                    [28.00, 0.00570190, 0.00129785, 0.00203902, 0.00000000, 1.294],
                                    [30.00, 0.00317131, 0.00082306, 0.00141417, 0.00000000, 1.154],
                                    [32.00, 0.00222681, 0.00059245, 0.00100995, 0.00000000, 1.101],

                                     ])

## 不等功率分配, 2倍等间隔
sic_block_2u_w_powdiv_2 = np.array([[0.00, 0.84078212, 0.23465869, 0.36837683, 0.00000000, 43.193],
                                        [2.00, 0.67792793, 0.17912444, 0.29809790, 0.00000000, 35.966],
                                        [4.00, 0.57915058, 0.14401469, 0.24370325, 0.00000000, 31.129],
                                        [6.00, 0.40760870, 0.09266994, 0.15057638, 0.00000000, 22.674],
                                        [8.00, 0.30039920, 0.06684872, 0.10985451, 0.00000000, 17.391],
                                        [10.00, 0.21582734, 0.04429097, 0.07133262, 0.00000000, 12.699],
                                        [12.00, 0.12875536, 0.02702019, 0.04541812, 0.00000000, 8.376],
                                        [14.00, 0.08896797, 0.01933258, 0.03191031, 0.00000000, 6.031],
                                        [16.00, 0.06877579, 0.01422799, 0.02257422, 0.00000000, 4.858],
                                        [18.00, 0.03965107, 0.00850510, 0.01346278, 0.00000000, 3.271],
                                        [20.00, 0.02422481, 0.00505425, 0.00833548, 0.00000000, 2.424],
                                        [22.00, 0.01555694, 0.00327688, 0.00529584, 0.00000000, 1.904],
                                        [24.00, 0.01191800, 0.00262452, 0.00393418, 0.00000000, 1.671],
                                        [26.00, 0.00742097, 0.00157575, 0.00249211, 0.00000000, 1.407],
                                        [28.00, 0.00518403, 0.00120377, 0.00203264, 0.00000000, 1.276],
                                        [30.00, 0.00357550, 0.00086996, 0.00147491, 0.00000000, 1.175],
                                        [32.00, 0.00226891, 0.00059256, 0.00099817, 0.00000000, 1.107],

                                        ])

## 不等功率分配, 3倍等间隔
sic_block_2u_w_powdiv_3 = np.array([[0.00, 0.83611111, 0.24115668, 0.38052300, 0.00000000, 42.819],
                                        [2.00, 0.71090047, 0.19315110, 0.32056243, 0.00000000, 36.964],
                                        [4.00, 0.60240964, 0.15134366, 0.26042451, 0.00000000, 32.153],
                                        [6.00, 0.41322314, 0.09618468, 0.16162513, 0.00000000, 23.014],
                                        [8.00, 0.31914894, 0.07222615, 0.12471742, 0.00000000, 18.140],
                                        [10.00, 0.21748555, 0.04651091, 0.07783429, 0.00000000, 12.907],
                                        [12.00, 0.15015015, 0.03084530, 0.05248803, 0.00000000, 9.398],
                                        [14.00, 0.09523810, 0.02088108, 0.03523065, 0.00000000, 6.432],
                                        [16.00, 0.06799637, 0.01448819, 0.02472925, 0.00000000, 4.872],
                                        [18.00, 0.04159734, 0.00906557, 0.01553401, 0.00000000, 3.429],
                                        [20.00, 0.03040130, 0.00624394, 0.00993149, 0.00000000, 2.699],
                                        [22.00, 0.01792543, 0.00371463, 0.00586941, 0.00000000, 2.024],
                                        [24.00, 0.01292769, 0.00272609, 0.00433717, 0.00000000, 1.729],
                                        [26.00, 0.00726885, 0.00156583, 0.00255593, 0.00000000, 1.414],
                                        [28.00, 0.00554467, 0.00125452, 0.00210943, 0.00000000, 1.292],
                                        [30.00, 0.00372506, 0.00087640, 0.00148493, 0.00000000, 1.192],
                                        [32.00, 0.00211309, 0.00052848, 0.00088835, 0.00000000, 1.109],

                                        ])

## 不等功率分配, 4倍等间隔
sic_block_2u_w_powdiv_4 = np.array([[0.00, 0.83611111, 0.24529622, 0.39061415, 0.00000000, 42.778],
                                        [2.00, 0.71666667, 0.20110212, 0.33529576, 0.00000000, 37.112],
                                        [4.00, 0.60000000, 0.15582813, 0.27225781, 0.00000000, 32.280],
                                        [6.00, 0.45180723, 0.10461573, 0.17936394, 0.00000000, 24.666],
                                        [8.00, 0.32751092, 0.07623584, 0.13389141, 0.00000000, 18.540],
                                        [10.00, 0.22164948, 0.04838083, 0.08551178, 0.00000000, 13.228],
                                        [12.00, 0.16538037, 0.03457053, 0.05855714, 0.00000000, 10.096],
                                        [14.00, 0.11169025, 0.02446278, 0.04200309, 0.00000000, 7.262],
                                        [16.00, 0.07122507, 0.01482325, 0.02616130, 0.00000000, 5.077],
                                        [18.00, 0.05042017, 0.01089220, 0.01878414, 0.00000000, 3.819],
                                        [20.00, 0.03142678, 0.00670356, 0.01099160, 0.00000000, 2.772],
                                        [22.00, 0.01965151, 0.00404174, 0.00663648, 0.00000000, 2.129],
                                        [24.00, 0.01363512, 0.00294895, 0.00491344, 0.00000000, 1.780],
                                        [26.00, 0.00855188, 0.00181817, 0.00298603, 0.00000000, 1.483],
                                        [28.00, 0.00532122, 0.00123123, 0.00202324, 0.00000000, 1.294],
                                        [30.00, 0.00389388, 0.00095352, 0.00160922, 0.00000000, 1.204],
                                        [32.00, 0.00254275, 0.00062861, 0.00106249, 0.00000000, 1.128],

                                        ])

def SISO_2user():
    width = 8
    high  = 6
    fig, axs = plt.subplots(1, 1, figsize=(width, high), constrained_layout = True)# constrained_layout=True
    cols = 2
    ##=============================== LDPC =========================================

    ##=========================   ===============================
    lb =  "Proposed"
    axs.semilogy(Joint_block_2u_w_powdiv_1[:, 0], Joint_block_2u_w_powdiv_1[:, cols], color = 'r', ls = '--',  marker = '*', mfc = 'none', ms = 16, mew = 2, label = lb, zorder = 12)

    # lb = r"Proposed, $\rho$=2"
    # axs.semilogy(Joint_block_2u_w_powdiv_2[:, 0], Joint_block_2u_w_powdiv_2[:, cols], color = 'r', ls = '--',  marker = 'o', mfc = 'none', ms = 16, mew = 2, label = lb, zorder = 12)

    # lb = r"Proposed, $\rho$=3"
    # axs.semilogy(Joint_block_2u_w_powdiv_3[:, 0], Joint_block_2u_w_powdiv_3[:, cols], color = 'r', ls = '--',  marker = 'h', mfc = 'none', ms = 16, mew = 2, label = lb, zorder = 12)

    # lb = r"Proposed, $\rho$=4"
    # axs.semilogy(Joint_block_2u_w_powdiv_4[:, 0], Joint_block_2u_w_powdiv_4[:, cols], color = 'r', ls = '--',  marker = 's', mfc = 'none', ms = 16, mew = 2, label = lb, zorder = 12)

    # #=========================  ===============================
    # lb = r"SIC,  $\rho$=1"
    # axs.semilogy(sic_block_2u_w_powdiv_1[:, 0], sic_block_2u_w_powdiv_1[:, cols], color = 'b',ls = '--', lw = 2,  marker = '*', mfc = 'none', ms = 12, mew = 2, label = lb)

    # lb = r"SIC,  $\rho$=2"
    # axs.semilogy(sic_block_2u_w_powdiv_2[:, 0], sic_block_2u_w_powdiv_2[:, cols], color = 'b',ls = '--', lw = 2,  marker = 'o', mfc = 'none', ms = 12, mew = 2, label = lb)

    # lb = r"SIC,  $\rho$=3"
    # axs.semilogy(sic_block_2u_w_powdiv_3[:, 0], sic_block_2u_w_powdiv_3[:, cols], color = 'b',ls = '--', lw = 2,  marker = 'h', mfc = 'none', ms = 12, mew = 2, label = lb)

    lb = r"SIC,  $\rho$=4"
    axs.semilogy(sic_block_2u_w_powdiv_4[:, 0], sic_block_2u_w_powdiv_4[:, cols], color = 'b',ls = '--', lw = 2,  marker = 's', mfc = 'none', ms = 12, mew = 2, label = lb)

    ##===========================================================
    # plt.gca().invert_xaxis()

    axs.grid(linestyle = (0, (5, 10)), linewidth = 0.5 )
    # label
    font = {'family':'Times New Roman','style':'normal','size':35}
    axs.set_xlabel("SNR (dB)", fontproperties=font)
    if cols == 1:
        axs.set_ylabel( "FER",      fontproperties = font )# , fontdict = font1
    elif cols == 2:
        axs.set_ylabel( "BER",      fontproperties = font )# , fontdict = font1
    elif cols == 3:
        axs.set_ylabel( "Aggregation error rate",      fontproperties = font )# , fontdict = font1
    #font1 = FontProperties(fname=fontpath1+"Times_New_Roman.ttf", size = 22)
    # font1 = FontProperties(fname=fontpath2+"Caskaydia Cove ExtraLight Nerd Font Complete.otf", size=16)
    font1 = {'family':'Times New Roman','style':'normal','size':26, }
    legend1 = axs.legend(loc = 'lower left', borderaxespad = 0, edgecolor = 'black', prop = font1, labelspacing = 0.1)
    frame1 = legend1.get_frame()
    frame1.set_alpha(1)
    frame1.set_facecolor('none')  # 设置图例legend背景透明

    bw = 2.5
    axs.spines['bottom'].set_linewidth(bw) ###设置底部坐标轴的粗细
    axs.spines['left'].set_linewidth(bw)   ###设置左边坐标轴的粗细
    axs.spines['right'].set_linewidth(bw)  ###设置右边坐标轴的粗细
    axs.spines['top'].set_linewidth(bw)    ###设置上部坐标轴的粗细

    axs.tick_params(direction = 'in', axis = 'both', top=True, right = True, labelsize = 16, width = bw)
    labels = axs.get_xticklabels() + axs.get_yticklabels()
    [label.set_fontname('Times New Roman') for label in labels]
    [label.set_fontsize(30) for label in labels] #刻度值字号

    # fontt = {'family':'Times New Roman','style':'normal','size':35 }
    # plt.suptitle("2 User, Blockfading, BPSK, [1024, 512]", fontproperties = fontt, )
    out_fig = plt.gcf()

    if cols == 1:
        out_fig.savefig("./Figures/2user_block_fer.eps")
        out_fig.savefig("./Figures/2user_block_fer.pdf")
    elif cols == 2:
        out_fig.savefig( "./Figures/2user_block_ber.eps")
        out_fig.savefig( "./Figures/2user_block_ber.pdf")
    elif cols == 3:
        out_fig.savefig( "./Figures/2user_block_aggerr.eps")
        out_fig.savefig( "./Figures/2user_block_aggerr.pdf")
    plt.show()
    plt.close()
    return

SISO_2user()

# 第一组数据，第一列是Eb/N0或SNR, 第二列是BER，第三列是WER，下同。
Joint_block_4u_w_powdiv_1 = np.array([[0.00, 0.99509804, 0.32399854, 0.59413297, 0.00000000, 12.500],
                                      [4.00, 0.89285714, 0.24126325, 0.49895368, 0.00000000, 12.500],
                                      [8.00, 0.56179775, 0.12594364, 0.31019575, 0.00000000, 11.831],
                                      [12.00, 0.30120482, 0.05723480, 0.16690983, 0.00000000, 9.148],
                                      [16.00, 0.13328912, 0.02628818, 0.07677802, 0.00000000, 5.186],
                                      [20.00, 0.04612546, 0.00773367, 0.02458523, 0.00000000, 2.409],
                                      [24.00, 0.01927503, 0.00332245, 0.01033950, 0.00000000, 1.187],
                                      [28.00, 0.00686719, 0.00119036, 0.00377266, 0.00000000, 0.615],
                                      [32.00, 0.00311507, 0.00052171, 0.00168701, 0.00000000, 0.412],
                                      [36.00, 0.00137847, 0.00024079, 0.00078228, 0.00000000, 0.320],
                                      [40.00, 0.00066716, 0.00011121, 0.00032980, 0.00000000, 0.281],
                                      [44, 0.0002417520, 0.0000348991, 0.000108, 0.00000000, 0.281],
                                      ])

## 不等功率分配, 1 倍等间隔
sic_block_4u_w_powdiv_1 = np.array([[0.00, 0.97596154, 0.33678260, 0.64111328, 0.00000000, 48.966],
                                    [4.00, 0.90909091, 0.27743253, 0.55419034, 0.00000000, 46.232],
                                    [8.00, 0.72463768, 0.20587777, 0.43766984, 0.00000000, 38.170],
                                    [12.00, 0.51010101, 0.12625276, 0.27083333, 0.00000000, 27.947],
                                    [16.00, 0.49509804, 0.11666571, 0.20869715, 0.00000000, 26.051],
                                    [20.00, 0.34353741, 0.08568173, 0.16703869, 0.00000000, 17.452],
                                    [24.00, 0.32467532, 0.08708211, 0.18084162, 0.00000000, 14.805],
                                    [28.00, 0.32843137, 0.09707223, 0.20131230, 0.00000000, 13.830],
                                    [32.00, 0.38068182, 0.11401737, 0.25090258, 0.00000000, 15.282],
                                    [36.00, 0.31645570, 0.09639846, 0.19890971, 0.00000000, 12.918],
                                    [40.00, 0.26719577, 0.08088159, 0.17601893, 0.00000000, 10.926],
                                    [44.00, 0.28230337, 0.08517216, 0.18622718, 0.00000000, 11.430],
                                    [48.00, 0.32629870, 0.09540508, 0.21022727, 0.00000000, 13.071],
                                    [52.00, 0.27762431, 0.08176688, 0.18096081, 0.00000000, 11.512],
                                    [56.00, 0.32371795, 0.09673603, 0.21491887, 0.00000000, 12.954],
                                    [60.00, 0.29558824, 0.08925494, 0.19758732, 0.00000000, 11.882],

                                   ])

## 不等功率分配, 2倍等间隔
sic_block_4u_w_powdiv_2 = np.array([[0.00, 0.96153846, 0.33803148, 0.64464393, 0.00000000, 48.438],
                                    [4.00, 0.86206897, 0.27258722, 0.57273707, 0.00000000, 44.461],
                                    [8.00, 0.72463768, 0.21774513, 0.47961957, 0.00000000, 37.678],
                                    [12.00, 0.52083333, 0.14060974, 0.32873535, 0.00000000, 27.938],
                                    [16.00, 0.36764706, 0.08951703, 0.19360352, 0.00000000, 20.553],
                                    [20.00, 0.32467532, 0.07346096, 0.13976258, 0.00000000, 17.036],
                                    [24.00, 0.24512195, 0.06631574, 0.13640434, 0.00000000, 11.968],
                                    [28.00, 0.21202532, 0.05951057, 0.13114781, 0.00000000, 9.264],
                                    [32.00, 0.21218487, 0.06288775, 0.13757222, 0.00000000, 9.056],
                                    [36.00, 0.18181818, 0.05321023, 0.11942472, 0.00000000, 7.846],
                                    [40.00, 0.19747082, 0.05749749, 0.13349647, 0.00000000, 8.499],
                                    [44.00, 0.16181230, 0.04836987, 0.10788329, 0.00000000, 7.140],
                                    [48.00, 0.16666667, 0.05047990, 0.11473804, 0.00000000, 7.299],
                                    [52.00, 0.19628906, 0.05762291, 0.13319397, 0.00000000, 8.338],
                                    [56.00, 0.19455253, 0.05682682, 0.12875426, 0.00000000, 8.283],
                                    [60.00, 0.21459227, 0.06284787, 0.14101060, 0.00000000, 8.945],

                                   ])

## 不等功率分配, 3倍等间隔
sic_block_4u_w_powdiv_3 = np.array([[0.00, 0.93981481, 0.34054905, 0.65259693, 0.00000000, 47.486],
                                    [4.00, 0.84166667, 0.28041992, 0.59954427, 0.00000000, 43.175],
                                    [8.00, 0.72463768, 0.22753906, 0.52972147, 0.00000000, 37.460],
                                    [12.00, 0.57102273, 0.15632768, 0.40300959, 0.00000000, 30.395],
                                    [16.00, 0.42584746, 0.10344942, 0.26380429, 0.00000000, 23.447],
                                    [20.00, 0.27027027, 0.06175306, 0.14192356, 0.00000000, 15.204],
                                    [24.00, 0.16393443, 0.03882076, 0.08316470, 0.00000000, 9.390],
                                    [28.00, 0.13575269, 0.03687836, 0.08022513, 0.00000000, 6.994],
                                    [32.00, 0.10639413, 0.03021509, 0.06908412, 0.00000000, 5.224],
                                    [36.00, 0.09940945, 0.02896911, 0.06692144, 0.00000000, 4.784],
                                    [40.00, 0.10691489, 0.03137882, 0.07345412, 0.00000000, 5.104],
                                    [44.00, 0.12818878, 0.03923564, 0.08605708, 0.00000000, 5.700],
                                    [48.00, 0.09439252, 0.02741585, 0.06385076, 0.00000000, 4.685],
                                    [52.00, 0.09842520, 0.02870382, 0.06849394, 0.00000000, 4.561],
                                    [56.00, 0.10534591, 0.03185191, 0.07290848, 0.00000000, 4.828],

                                   ])

## 不等功率分配, 4倍等间隔
sic_block_4u_w_powdiv_4 = np.array([[0.00, 0.92272727, 0.34778054, 0.66260653, 0.00000000, 46.709],
                                    [4.00, 0.82377049, 0.29016714, 0.61923668, 0.00000000, 42.102],
                                    [8.00, 0.70486111, 0.23291694, 0.55821398, 0.00000000, 36.781],
                                    [12.00, 0.56741573, 0.16318469, 0.44921875, 0.00000000, 30.017],
                                    [16.00, 0.46527778, 0.12177192, 0.33857784, 0.00000000, 24.671],
                                    [20.00, 0.28389831, 0.07033457, 0.18780897, 0.00000000, 16.008],
                                    [24.00, 0.17693662, 0.04055313, 0.10501485, 0.00000000, 10.078],
                                    [28.00, 0.12256098, 0.03069979, 0.07096037, 0.00000000, 6.826],
                                    [32.00, 0.07533733, 0.01979552, 0.04820149, 0.00000000, 4.217],
                                    [36.00, 0.06671070, 0.01924809, 0.04416591, 0.00000000, 3.673],
                                    [40.00, 0.06940358, 0.01974341, 0.04755560, 0.00000000, 4.703],
                                    [44.00, 0.06527415, 0.01958607, 0.04599533, 0.00000000, 3.362],
                                    [48.00, 0.06257783, 0.01921809, 0.04319009, 0.00000000, 3.315],
                                    [52.00, 0.05313496, 0.01560788, 0.03704088, 0.00000000, 2.917],
                                    [56.00, 0.05884075, 0.01783770, 0.04133581, 0.00000000, 3.138],

                                    ])

def SISO_4user():
    width = 8
    high  = 6
    fig, axs = plt.subplots(1, 1, figsize=(width, high), constrained_layout = True)# constrained_layout=True
    cols = 2
    ##=============================== LDPC =========================================

    ##=========================   ===============================
    lb = "Proposed"
    axs.semilogy(Joint_block_4u_w_powdiv_1[:, 0], Joint_block_4u_w_powdiv_1[:, cols], color = 'r', ls = '--',  marker = '*', mfc = 'none', ms = 16, mew = 2, label = lb, zorder = 12)

    # lb = r"Proposed, $\rho$=2"
    # axs.semilogy(Joint_block_2u_w_powdiv_2[:, 0], Joint_block_2u_w_powdiv_2[:, cols], color = 'r', ls = '--',  marker = 'o', mfc = 'none', ms = 16, mew = 2, label = lb, zorder = 12)

    # lb = r"Proposed, $\rho$=3"
    # axs.semilogy(Joint_block_2u_w_powdiv_3[:, 0], Joint_block_2u_w_powdiv_3[:, cols], color = 'r', ls = '--',  marker = 'h', mfc = 'none', ms = 16, mew = 2, label = lb, zorder = 12)

    # lb = r"Proposed, $\rho$=4"
    # axs.semilogy(Joint_block_2u_w_powdiv_4[:, 0], Joint_block_2u_w_powdiv_4[:, cols], color = 'r', ls = '--',  marker = 's', mfc = 'none', ms = 16, mew = 2, label = lb, zorder = 12)

    # #=========================  ===============================
    # lb = r"SIC,  $\rho$=1"
    # axs.semilogy(sic_block_4u_w_powdiv_1[:, 0], sic_block_4u_w_powdiv_1[:, cols], color = 'b',ls = '--', lw = 2,  marker = '*', mfc = 'none', ms = 12, mew = 2, label = lb)

    # lb = r"SIC,  $\rho$=2"
    # axs.semilogy(sic_block_4u_w_powdiv_2[:, 0], sic_block_4u_w_powdiv_2[:, cols], color = 'b',ls = '--', lw = 2,  marker = 'o', mfc = 'none', ms = 12, mew = 2, label = lb)

    # lb = r"SIC,  $\rho$=3"
    # axs.semilogy(sic_block_4u_w_powdiv_3[:, 0], sic_block_4u_w_powdiv_3[:, cols], color = 'b',ls = '--', lw = 2,  marker = 'h', mfc = 'none', ms = 12, mew = 2, label = lb)

    lb = r"SIC,  $\rho$=4"
    axs.semilogy(sic_block_4u_w_powdiv_4[:, 0], sic_block_4u_w_powdiv_4[:, cols], color = 'b',ls = '--', lw = 2,  marker = 's', mfc = 'none', ms = 12, mew = 2, label = lb)

    ##===========================================================
    # plt.gca().invert_xaxis()

    axs.grid(linestyle = (0, (5, 10)), linewidth = 0.5 )
    # label
    font = {'family':'Times New Roman','style':'normal','size':35}
    axs.set_xlabel("SNR (dB)", fontproperties=font)
    if cols == 1:
        axs.set_ylabel( "FER",      fontproperties = font )# , fontdict = font1
    elif cols == 2:
        axs.set_ylabel( "BER",      fontproperties = font )# , fontdict = font1
    elif cols == 3:
        axs.set_ylabel( "Aggregation error rate",      fontproperties = font )# , fontdict = font1
    #font1 = FontProperties(fname=fontpath1+"Times_New_Roman.ttf", size = 22)
    # font1 = FontProperties(fname=fontpath2+"Caskaydia Cove ExtraLight Nerd Font Complete.otf", size=16)
    font1 = {'family':'Times New Roman','style':'normal','size':26, }
    legend1 = axs.legend(loc = 'lower left', borderaxespad = 0, edgecolor = 'black', prop = font1, labelspacing = 0.1)
    frame1 = legend1.get_frame()
    frame1.set_alpha(1)
    frame1.set_facecolor('none')  # 设置图例legend背景透明

    bw = 2.5
    axs.spines['bottom'].set_linewidth(bw) ###设置底部坐标轴的粗细
    axs.spines['left'].set_linewidth(bw)   ###设置左边坐标轴的粗细
    axs.spines['right'].set_linewidth(bw)  ###设置右边坐标轴的粗细
    axs.spines['top'].set_linewidth(bw)    ###设置上部坐标轴的粗细

    axs.tick_params(direction = 'in', axis = 'both', top=True, right = True, labelsize = 16, width = bw)
    labels = axs.get_xticklabels() + axs.get_yticklabels()
    [label.set_fontname('Times New Roman') for label in labels]
    [label.set_fontsize(30) for label in labels] #刻度值字号

    # fontt = {'family':'Times New Roman','style':'normal','size':35 }
    # plt.suptitle("4 User, Blockfading, BPSK, [1024, 512]", fontproperties = fontt, )
    out_fig = plt.gcf()

    if cols == 1:
        out_fig.savefig("./Figures/4user_block_fer.eps")
        out_fig.savefig("./Figures/4user_block_fer.pdf")
    elif cols == 2:
        out_fig.savefig( "./Figures/4user_block_ber.eps")
        out_fig.savefig( "./Figures/4user_block_ber.pdf")
    elif cols == 3:
        out_fig.savefig( "./Figures/4user_block_aggerr.eps")
        out_fig.savefig( "./Figures/4user_block_aggerr.pdf")
    plt.show()
    plt.close()
    return

SISO_4user()













