#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Thu May 23 17:32:05 2024

@author: jack
https://zhuanlan.zhihu.com/p/627524436


"""


import numpy as np
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# 全局设置字体大小
# plt.rcParams["font.family"] = "Times New Roman"
plt.rcParams["font.family"] = "SimSun"
plt.rcParams['font.size'] = 14        # 设置全局字体大小
plt.rcParams['axes.titlesize'] = 22   # 设置坐标轴标题字体大小
plt.rcParams['axes.labelsize'] = 22   # 设置坐标轴标签字体大小
plt.rcParams['xtick.labelsize'] = 22  # 设置 x 轴刻度字体大小
plt.rcParams['ytick.labelsize'] = 22  # 设置 y 轴刻度字体大小
plt.rcParams['axes.unicode_minus'] = False # 用来显示负号
plt.rcParams["figure.figsize"] = [8, 6] # 调整生成的图表最大尺寸
# plt.rcParams['figure.dpi'] = 300      # 每英寸点数
plt.rcParams['lines.linestyle'] = '-'
plt.rcParams['lines.linewidth'] = 2     # 线条宽度
plt.rcParams['lines.color'] = 'blue'
plt.rcParams['lines.markersize'] = 6 # 标记大小
plt.rcParams['figure.facecolor'] = 'white'        # 设置图形背景色为浅灰色
plt.rcParams['axes.edgecolor'] = 'black'          # 设置坐标轴边框颜色为黑色
plt.rcParams['legend.fontsize'] = 22

# 指定方向角度
theta_real = 40 * np.pi / 180
phi_real = 25 * np.pi / 180

# 离散化相位
Delta = 0.05
theta = np.arange(-np.pi/2, np.pi/2 + Delta, Delta)
phi = np.arange(-np.pi/2, np.pi/2 + Delta, Delta)

# 天线数量
Na_vec = [4, 8]
Nb_vec = [4, 8]

for i in range(2):
    Na = Na_vec[i]
    Nb = Nb_vec[i]

    # 初始化增益矩阵
    Gain = np.zeros((len(theta), len(phi)))

    # 遍历各相位，计算与之对应的波束增益
    for j in range(len(theta)):
        for k in range(len(phi)):
            V = np.pi * (np.sin(theta[j]) * np.sin(phi[k]) - np.sin(theta_real) * np.sin(phi_real)) / 2
            U = np.pi * (np.sin(theta[j]) * np.cos(phi[k]) - np.sin(theta_real) * np.cos(phi_real)) / 2

            # 避免除以0
            if np.abs(np.sin(V)) < 1e-10:
                term1 = Nb if np.abs(V) < 1e-10 else np.sin(Nb * V) / np.sin(V)
            else:
                term1 = np.sin(Nb * V) / np.sin(V)

            if np.abs(np.sin(U)) < 1e-10:
                term2 = Na if np.abs(U) < 1e-10 else np.sin(Na * U) / np.sin(U)
            else:
                term2 = np.sin(Na * U) / np.sin(U)

            Gain[j, k] = np.abs(term1 * term2) / (Nb * Na)

    # 命令行输出增益最大的方向
    max_index = np.unravel_index(np.argmax(Gain), Gain.shape)
    a, b = max_index
    print(f'增益最大的方向：theta={theta[a]*180/np.pi}°, phi={phi[b]*180/np.pi}°')

    # 绘图
    fig = plt.figure(figsize=(8, 8))
    ax = fig.add_subplot(111, projection='3d')

    X, Y = np.meshgrid(theta * 180 / np.pi, phi * 180 / np.pi)
    surf = ax.plot_surface(X, Y, Gain.T, cmap='viridis')

    ax.set_xlabel(r'$\theta$')
    ax.set_ylabel(r'$\phi$')
    ax.set_zlabel('Beam Gain')

    plt.title(f'Nx={Na}, Ny={Nb}, ' +
              r'$\phi$=' + f'{phi_real*180/np.pi}' + r'$^\circ$, ' +
              r'$\theta$=' + f'{theta_real*180/np.pi}' + r'$^\circ$')

    plt.colorbar(surf)
    plt.tight_layout()
    plt.show()

















































































































































































































































































































































































































































































































































































































































































































































































































































































































