#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Mar  9 16:43:03 2022

@author: jack


数字格式类型
类型	含义
d	小数整数
c	对应的Unicode字符
b	二进制格式
o	八进制格式
x	十六进制格式（小写）
X	十六进制格式（大写）
n	与“ d”相同。除了使用数字分隔符的当前语言环境设置
e	指数表示法。（小写字母e）
E	指数符号（大写E）
f	显示定点编号（默认值：6）
F	与“ f”相同。除了将“ inf”显示为“ INF”和“ nan”显示为“ NAN”
g	通用格式。将数字四舍五入为p个有效数字。（默认精度：6）
G	与“ g”相同。如果数量很大，则除外切换到“ E”。
%	百分比。乘以100并以％结尾。


数字	        格式	          输出	      描述
3.1415926	{:.2f}	      3.14	     保留小数点后两位
3.1415926	{:+.2f}	      +3.14	      带符号保留小数点后两位
-1	        {:+.2f}	      -1.00	       带符号保留小数点后两位
2.71828	    {:.0f}	      3	           不带小数
5	        {:0>2d}      05	           数字补零 (填充左边, 宽度为2)
5	        {:x<4d}	     5xxx	       数字补x (填充右边, 宽度为4)
10	        {:x<4d}	     10xx	        数字补x (填充右边, 宽度为4)
1000000  	{:,}	         1,000,000	     以逗号分隔的数字格式
0.25	        {:.2%}	     25.00%	         百分比格式
1000000000	{:.2e}	     1.00e+09	     指数记法
13      	    {:>10d}	           13	     右对齐 (默认, 宽度为10)
13	        {:<10d}	     13	             左对齐 (宽度为10)
13	        {:^10d}	         13	         中间对齐 (宽度为10)
11            '{:b}'.format(11)    1011	 2进制
11            '{:d}'.format(11)    11  	 10进制
11            '{:o}'.format(11)    13  	 8进制
11            '{:x}'.format(11)     b  	 16进制
11            '{:#x}'.format(11)   0xb  	 16进制
11            '{:#X}'.format(11)	  0XB  	 16进制







^, <, > 分别是居中、左对齐、右对齐，后面带宽度， : 号后面带填充的字符，只能是一个字符，不指定则默认是用空格填充。

+ 表示在正数前显示 +，负数前显示 -；  （空格）表示在正数前加空格

b、d、o、x 分别是二进制、十进制、八进制、十六进制。

此外我们可以使用大括号 {} 来转义大括号，如下实例：



"""

#========================================================================
# https://www.cainiaojc.com/python/python-methods-string-format.html
#========================================================================
# 默认参数
print("Hello {}, your balance is {}.".format("Adam", 230.2346))

# 位置参数
print("Hello {0}, your balance is {1}.".format("Adam", 230.2346))

# 关键词参数
print("Hello {name}, your balance is {blc}.".format(name="Adam", blc=230.2346))

# 混合参数
print("Hello {0}, your balance is {blc}.".format("Adam", blc=230.2346))

# 设置指定位置
print("{0} {1}".format("hello", "world") ) 

 # 设置指定位置
print("{1} {0} {1}".format("hello", "world"))

# 整数参数
print("数字:{:d}".format(123))

# 浮点参数
print("浮点数:{:f}".format(123.4567898))

# 八进制，二进制和十六进制格式
print("bin: {0:b}, oct: {0:o}, hex: {0:x}\n bin: {1:b}, oct: {1:o}, hex: {1:x}".format(12, 11))


#========================================================================
# 最小宽度的整数
print("{:5d}".format(12))

# 宽度对于比填充更长的数字不起作用
print("{:2d}".format(1234))

# 浮点数的填充
print("{:8.3f}".format(12.2346))

# 最小宽度为0的整数,用0填充的整数
print("{:05d}".format(12))

# 填充,用0填充的浮点数
print("{:08.3f}".format(12.2346))

"""
这里，

在第一个语句中，{:5d}采用整数参数并指定最小宽度5。由于未指定对齐方式，因此它向右对齐。

在第二个语句中，您可以看到宽度（2）小于数字（1234），因此它不需要在左边留任何空格，也不会截断该数字。

与整数不同，浮点数具有整数和小数部分。 并且，定义为该数字的最小宽度是整个包括“.”的两个部分。

在第三条语句中，{:8.3f}将小数部分截断为3位，四舍五入最后两位数字。而且，该数字现在为12.235，整个宽度为8，在左侧保留2个位置。

如果要用零填充其余位置，请在格式说明符之前放置零。它适用于整数和浮点数：{:05d}和{:08.3f}。
"""

#========================================================================
# 数字补零 (填充左边, 宽度为2)
print('{:0>5.2f}'.format(0.032131))
# 00.03


# 百分比格式
print('{:0>6.2%}'.format(0.32131))
# 32.13%


# 百分比格式
print('{:0>5.2%}'.format(0.32131))
# 32.13%

# 百分比格式
print('{:0>5.2%}'.format(0.0032131))
# 0.32%

# 百分比格式
print('{:0>6.2%}'.format(0.0032131))
# 00.32%
#========================================================================

# 显示+号
print("{:+f} {:+f}".format(12.23, -12.23))
# +12.230000 -12.230000

# 仅显示-号
print("{:-f} {:-f}".format(12.23, -12.23))
# 12.230000 -12.230000

# 显示+号的空格
print("{: f} {: f}".format(12.23, -12.23))
#  12.230000 -12.230000

#========================================================================
num = 1234.56789

#小数点后保留两位数
print('{:.2f}'.format(num))			#123.46

#数字在12个字符长度的区域内右对齐，并保留小数点后1位数字
print('{:>12.1f}'.format(num))		#       123.5

#数字在12个字符长度的区域内右对齐，并保留小数点后1位数字,数字前面补0
print('{:0>12.1f}'.format(num))		#0000000123.5

#数字在12个字符长度的区域内左对齐，并保留小数点后1位数字,数字后面补0
print('{:0<12.1f}'.format(num))		#123.50000000

#数字在12个字符长度的区域内中心对齐，并保留小数点后2位数字，紧接着输出3
print('{:^12.2f}'.format(num),3)	   #   123.46    3

#数字在12个字符长度的区域内左对齐，并保留小数点后3位数字，紧接着输出20
print('{:<12.3f}'.format(num),20)	#123.457      20

#每千位用逗号（，）分隔
print('{:,}'.format(num))			#1,234.56789

#每千位用逗号（，）分隔,并保留小数点后2位数字
print('{:,.2f}'.format(num))		#1,234.57

#用科学计数法形式输出数字
print('{:e}'.format(num))			#1.234568e+03

#用科学计数法形式输出数字，尾数保留小数点后2位数字
print('{:.2e}'.format(num))		#1.23e+03



# 右对齐的整数
print("{:5d}".format(12))
print("{:>10d}".format(13))
#    12
#         13

# 具有中心对齐的浮点数
print("{:^10.3f}".format(12.2346))
# 具有中心对齐的浮点数,用*填充
print("{:*^12.3f}".format(12.2346))
#   12.235  
# ***12.235***

print("{:.3f}".format(2.1415))
#2.142
print("{:.10f}".format(3.1415))
#3.1415000000

# 整数左对齐，用0填充
print("{:<05d}".format(12))

# 整数左对齐，
print("{:<5d}".format(12))
# 整数左对齐，用*填充
print("{:*<10d}".format(13))


# 整数右对齐，
print("{:>10d}".format(12))
# 整数右对齐，用*填充
print("{:*>10d}".format(13))


# 中心对齐的浮点数
print("{:=12.3f}".format(-12.2346))
# -     12.235
print("{:*=12.3f}".format(-12.2346))
# -*****12.235

#用逗号还能做金额的千位分隔符
print("{:,}".format(123456789))

#填充对齐
print("{0}*{1}={2:0>3}".format(3,2,2*3))
"""
{2:0>3}表示format参数的第三个元素，并格式化为3位，不足3位填充0，并右对齐。
:是分隔符，前面是索引值或名称，后面是样式（填充字符、对齐方式、宽度）。
^表示居中
<表示左对齐
>表示右对齐
"""
#========================================================================
# 左对齐的字符串填充
print("{:5}".format("cat"))

# 右对齐的字符串填充
print("{:>5}".format("cat"))

#中心对齐的字符串填充
print("{:^5}".format("cat"))

# ^表示居中对齐，30位字符串，不足30位的填充*。
print("{:*^30}".format('centered'))
# ***********centered***********


# 中心对齐的字符串填充
# 和 '*' 填充字符
print("{:*^5}".format("cat"))



#========================================================================

# 将字符串截断为3个字母
print("{:.3}".format("caterpillar"))

# 将字符串截断为3个字母
# 和 填充
print("{:5.3}".format("caterpillar"))

# 将字符串截断为3个字母,
# 填充和中心对齐
print("{:^5.3}".format("caterpillar"))




#========================================================================


# define Person class
class Person:
    age = 23
    name = "Adam"

# 格式化age
print("{p.name}'年龄是 : {p.age}".format(p=Person()))





#========================================================================


# 定义Person字典
person = {'age': 23, 'name': 'Adam'}

# 格式化age
print("{p[name]}'s age is: {p[age]}".format(p=person))





#========================================================================

# 定义Person字典
person = {'age': 23, 'name': 'Adam'}

# 格式化age
print("{name}'s age is: {age}".format(**person))

print("网站名：{name}, 地址 {url}".format(name="菜鸟教程", url="www.runoob.com"))
 
# 通过字典设置参数
site = {"name": "菜鸟教程", "url": "www.runoob.com"}
print("网站名：{name}, 地址 {url}".format(**site))
 
# 通过列表索引设置参数
my_list = ['菜鸟教程', 'www.runoob.com']
print("网站名：{0[0]}, 地址 {0[1]}".format(my_list))  # "0" 是必须的




#========================================================================



# 动态字符串格式模板
string = "{:{fill}{align}{width}}"

# 将格式代码作为参数传递
print(string.format('cat', fill='*', align='^', width=5))

# 动态浮点格式模板
num = "{:{align}{width}.{precision}f}"

# 将格式代码作为参数传递
print(num.format(123.236, align='<', width=8, precision=2))




#========================================================================


import datetime
# 日期时间格式
date = datetime.datetime.now()
print("当前时间: {:%Y/%m/%d %H:%M:%S}".format(date))

# 复数格式
complexNumber = 1+2j
print("Real part: {0.real} and Imaginary part: {0.imag}".format(complexNumber))

# 自定义  __format__()方法
class Person:
    def __format__(self, format):
        if(format == 'age'):
            return '23'
        return 'None'

print("Adam's 年龄是: {:age}".format(Person()))

#========================================================================

# __str__() 和 __repr__() 简写为 !r 和 !s
print("Quotes: {0!r}, Without Quotes: {0!s}".format("cat"))

# __str__() 和 __repr__() 实现类
class Person:
    def __str__(self):
        return "STR"
    def __repr__(self):
        return "REPR"

print("repr: {p!r}, str: {p!s}".format(p=Person()))


#========================================================================

#元组传参
#利用元组传参，传参形式 *tuple


# 定义一个元组
T = 'like', 'Python'
# 不指定顺序
S = 'I {} {}, and I\'am learning'.format(*T)
print(S)
# 指定顺序
S = 'I {0} {1}, and I\'am learning'.format(*T)
print(S)

# I like Python, and I'am learning
# I like Python, and I'am learning

# 索引映射格式化
print("{0[0]}.{0[1]}".format(('baidu','com')))
#baidu.com　
#========================================================================
#字典传参

# 定义一个字典
D = {'l':'like', 'p':'Python'}
# 指定键确定顺序
S = 'I {l} {p}, and I\'am learning'.format(**D)
print(S)
 


#========================================================================

#列表传参
# 定义一个列表
L0 = ['like', 'Python']
L1 = [' ', 'Lerning']
# `[]`前的0、1用于指定传入的列表顺序
S = 'I {0[0]} {1[1]}, and I\'am learning'.format(L0, L1)
print(S)
#示例结果：


#  I like Lerning, and I'am learning

#========================================================================

for i in range(1,10):
    a = 1
    while a <= i:
        print("{0}*{1}={2:0>2}".format(a,i,a*i),end="\t")
        a +=1
    print()

#========================================================================



#========================================================================



#========================================================================



#========================================================================



#========================================================================



#========================================================================



#========================================================================



#========================================================================



#========================================================================



#========================================================================



#========================================================================



#========================================================================



#========================================================================



#========================================================================



#========================================================================



#========================================================================



#========================================================================



#========================================================================



    