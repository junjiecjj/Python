#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Aug 15 20:04:19 2023

@author: jack
"""

import struct
import sys

if sys.byteorder == 'little':
    print(f"本系统是小端")
elif sys.byteorder == 'big':
    print(f"本系统是大端")




num = int('0x12345678', 16)
val = num.to_bytes(length=4, byteorder='little', signed = True)
print(val)
# b'xV4\x12'


print(ord('x'))
print(ord('V'))
print(ord('4'))
print(hex(120))
print(hex(86))
print(hex(52))
# 120
# 86
# 52
# 0x78
# 0x56
# 0x34



num = int('0x78563412', 16)
val = num.to_bytes(length=4, byteorder='little', signed = True)
print(val)
# b'xV4\x12'


print(ord('x'))
print(ord('V'))
print(ord('4'))
print(hex(120))
print(hex(86))
print(hex(52))

val = num.to_bytes(length=4, byteorder='little', signed = True)








struct.pack('<BBBBBI', 1,2,3,4,5,1272)



import binascii

def big_small_end_convert(data):
    return binascii.hexlify(binascii.unhexlify(data)[::-1])

if __name__ =='__main__':
    di = b'12345678'
    do = big_small_end_convert(di)
    print(di)
    print(do)







import binascii
import sys
print("本机存储模式是{} Endian.\n".format(sys.byteorder.capitalize()))

content = "待传输中文文本"  # content是str类型
print("原文本为：", content, '\n')

# 先看最终代码
result = binascii.b2a_hex(content.encode('utf-16-be'))
print("编码后文本为：", result, '\n')
content = binascii.a2b_hex(result).decode('utf-16-be')
print("解码后文本为：", content, '\n')

# ————————————————————————————————————————————————
# 下面开始解释代码
# 解释编码
coded = content.encode('utf-16-be') # coded是bytes类型，uft-16就不解释了，be是Big Endian的缩写。
print("使用utf-16-be编码后为：", coded, '\n')
result = binascii.b2a_hex(coded) # b2a应该是bytes to ascii，hex就是16进制的意思，b2a_hex方法和hexlify方法是相同的。
print("utf-16-be转为hex为：", result, '\n')

# 解释解码
coded = binascii.a2b_hex(result) # 同理a2b应该是ascii to bytes，hex也是16进制的意思，a2b_hex方法和unhexlify方法是相同的。
print("hex转为utf-16-be为：", coded, '\n')
content = coded.decode('utf-16-be')
print("utf-16-be解码后的原文本为：", content, '\n')



































































































































































































































































































































































































































































































































































































































































































































































































































































































































