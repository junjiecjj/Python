function beta = ChannelGainGen(RCS, ...
                            lambda, ...
                            CarCenter, ...
                            FoV)
%% Generate Channel Gain
% input
%       RCS             Radar Cross Sectional Area(3×1)
%       lambda          wavelength of the center frequency
%       CarCenter       the Center of the car(3×3, column represents x,y,z)
%       FoV             Filed of View(2×1)
% output
%       beta            Channel Gain(4×1)
%                       A-B-A
%                       A-C-A
%                       A-B
%                       A-C-B
%% A: A-B-A
beta = zeros(4,1);
beta(1) = sqrt(RCS(1))*lambda/...
        ((4*pi)^(3/2)* ...
        Distance(CarCenter(1,:), CarCenter(2,:))^2 ...
        );
%% A: A-C-A
% Calculate the distance between the car C and the FoV of A
FoV_Ay = (CarCenter(3,1) - CarCenter(1,1))/...
        tand(FoV.azi(2));
if CarCenter(3,2) <= FoV_Ay - sqrt(RCS(2))/2
    beta(2) = 0;
elseif CarCenter(3,2) >= FoV_Ay + sqrt(RCS(2))/2
    beta(2) = sqrt(RCS(2))*lambda/...
        ((4*pi)^(3/2)* ...
        Distance(CarCenter(1,:), CarCenter(3,:))^2 ...
        );
else
    beta(2) = lambda/...
        ((4*pi)^(3/2)* ...
        Distance(CarCenter(1,:), CarCenter(3,:))^2 ...
        )*...
        (CarCenter(3,2)- (FoV_Ay - sqrt(RCS(2))/2));
end
%% B: A-B
beta(3) = lambda/...
        (4*pi* ...
        Distance(CarCenter(1,:), CarCenter(2,:)) ...
        );
%% B: A-C-B
% Calculate the distance between the car C and the FoV of B
FoV_By = (CarCenter(3,1) - CarCenter(2,1))/...
        tand(FoV.azi(2));
if CarCenter(3,2) >= CarCenter(2,2) - (FoV_By - sqrt(RCS(3))/2)
    beta(4) = 0;
elseif CarCenter(3,2) <= CarCenter(2,2) - (FoV_By + sqrt(RCS(3))/2)
    beta(4) = sqrt(RCS(3))*lambda/...
        ((4*pi)^(3/2)* ...
        Distance(CarCenter(1,:), CarCenter(3,:))* ...
        Distance(CarCenter(2,:), CarCenter(3,:))...
        );
else
    beta(4) = lambda/...
        ((4*pi)^(3/2)* ...
        Distance(CarCenter(1,:), CarCenter(3,:))* ...
        Distance(CarCenter(2,:), CarCenter(3,:)) ...
        )*...
        ((CarCenter(2,2) - (FoV_By - sqrt(RCS(3))/2)) - CarCenter(3,2));
end
end